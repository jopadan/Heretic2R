//
// snd_local.h -- Structures local to sound library.
//
// Copyright 2025 mxd
//

#pragma once

#include "q_shared.h"

#define SNDLIB_DECLSPEC __declspec(dllexport)

#pragma region ========================== Sound structures ==========================

typedef struct
{
	int left;
	int right;
} portable_samplepair_t;

//mxd. Moved from snd_loc.h. Not used outside of sound library.
typedef struct sfxcache_s
{
	int length;
	int loopstart;
	int speed; // Not needed, because converted on load?
	int width;
	int stereo;
	byte data[1]; // Variable-sized.
} sfxcache_t;

//mxd. Moved from snd_loc.h.
typedef struct sfx_s
{
	char name[MAX_QPATH];
	int registration_sequence;
	sfxcache_t* cache;
	//char* truename; //mxd. Missing in H2.
} sfx_t;

// A playsound_t will be generated by each call to S_StartSound.
// When the mixer reaches playsound->begin, the playsound will be assigned to a channel.
typedef struct playsound_s
{
	struct playsound_s* prev;
	struct playsound_s* next;
	sfx_t* sfx;
	float volume;
	int attenuation_index; // H2: attenuation index (ATTN_NONE, ATTN_STATIC etc.) instead of actual value.
	int entnum;
	int entchannel;
	qboolean fixed_origin; // Use origin field instead of entnum's origin.
	vec3_t origin;
	uint begin; // Begin on this sample.
} playsound_t;

typedef struct
{
	int channels;
	int samples;			// Mono samples in buffer.
	int submission_chunk;	// Don't mix less than this #.
	int samplepos;			// In mono samples.
	int samplebits;
	int speed;
	byte* buffer;
} dma_t;

typedef enum // H2
{
	CF_NONE = 0,
	CF_LEFT_ONLY = 256,
	CF_RIGHT_ONLY = 512,
} channel_flags_e;

typedef struct
{
	sfx_t* sfx;
	int leftvol;		// 0-255 volume.
	int rightvol;		// 0-255 volume.
	int end;			// End time in global paintsamples.
	int pos;			// Sample position in sfx.
	int looping;		// Where to loop, -1 = no looping OBSOLETE?
	int entnum;			// To allow overriding a specific sound.
	int entchannel;
	vec3_t origin;		// Only use if fixed_origin is set.
	float dist_mult;	// Distance multiplier (attenuation/clip).
	int master_vol;		// 0-255 master volume.
	channel_flags_e flags;	// H2 //TODO: never set. Remove?..
	qboolean fixed_origin;	// Use origin instead of fetching entnum's origin.
	qboolean autosound;		// From an entity->sound, cleared each frame.
} channel_t;

typedef struct
{
	int rate;
	int width;
	int channels;
	int loopstart;
	int samples;
	int dataofs; // Chunk starts this many bytes from file start.
} wavinfo_t;

#pragma endregion

#define MAX_CHANNELS	32
extern channel_t channels[MAX_CHANNELS];

extern playsound_t s_pendingplays;